#!/usr/bin/env bash

# check_watch_dirs.sh
#
# Maintains a shortened empty folder tree of your disk to place .torrent files
#   into, so they would be kept separately from the actual files. Which are
#   downloaded into their respective directories, excluding the need to move
#   torrent files by hand.
# I.e. you place .torrent file in the mirror – it is downloaded on the same
#   path in the directory which was mirrored.
#
# check_watch_dirs.sh © deterenkelt, 2016

# Why $USER is no more available?!
{ rt_user=`sed -rn 's/^\s*USER="?([^"]+)"?/\1/p;T;Q1' /etc/conf.d/rtorrentd` || [ -z "$rt_user" ]; } && {
	einfo 'Cannot guess the user from /etc/conf.d/rtorrentd, defaulting to ‘rtorrent’.'
	rt_user=rtorrent
}
rt_home=$(echo `eval echo ~$rt_user`)

# The mirror looks like this:

# $torrents_dir
#              \_ $hosts[0]  usually you want it to be $HOSTNAME
#              |           \_ $storage_dirs[0]
#              |           |_ $storage_dirs[1]
#              |           ⁞
#              |           |_ $storage_dirs[n]
#              ⁞

# This is supposed to work in the future…
#              |_ $hosts[1]  optional backup storage
#              |           \_ $storage_dirs[0]
#              |           |_ $storage_dirs[1]
#              |           ⁞
#              |           |_ $storage_dirs[n]
#              ⁞

torrents_dir='/home/torrents'
hosts=( $HOSTNAME )

# Directories under $hosts[n] root, that shall be  mirrored.
# The number assigned is the depths of subfolders to watch,
#   0 – watch only this path
#   1 – one level of subfolders
#   2 – two levels…
declare -A storage_subdirs=(
	[/home/brains]=1
	[/home/music]=2
	[/home/video]=2
	[/home/gamefiles]=1
	[/home/misc_torrents]=1
	[/home/picts/manga]=0
)

watchdir_count=0  # a counter, that is required for .rtorrent.rc rules
# verbose_log='_verbose'  # verbosity per each rule added to .rtorrent.rc

# Remove any existing rules for watching directories from the config.
sed -ri '/^\s*schedule\s*=\s*watch_directory.*/d' "$rt_home/.rtorrent.rc"

for host in "${hosts[@]}"; do
	[ "$host" = "${HOSTNAME%%.*}" ] && {
		[ -d "$torrents_dir/$host" ] \
			|| mkdir --mode=775 "$torrents_dir/$host"
		chown -R --reference="$rt_home/.rtorrent.rc" "$torrents_dir/$host"
		# Stashing all stuff. Yes, without removing old one.
		cp -Ra "$torrents_dir/$host" "$torrents_dir/${host}.bak"
		# Cleaning the torrents_dir from folders deleted in the original storage.
		while IFS= read -r -d $'\0'; do
			REPLY=${REPLY#$torrents_dir/$host/}
			[ -e "$REPLY" ] || {
				einfo 'This directory wasn’t found in storage:'
				rm -rfv "$torrents_dir/$host/$REPLY"
			}
		done <  <(find "$torrents_dir/$host" -mindepth 1 -type d -print0)

		for storage_dir in ${!storage_subdirs[@]}; do
			while IFS= read -r -d $'\0'; do
				[ -e "$torrents_dir/$host/$REPLY" ] \
					|| mkdir -p --mode=775 "$torrents_dir/$host/$REPLY"
				REPLY=$(echo "$REPLY" | sed 's/ /\\\\\ /g; s/;/\\\\\;/g' )
				echo "schedule = watch_directory_$((watchdir_count++)),10,10,\"load_start$verbose_log=\\\"$torrents_dir/$host/$REPLY/*.torrent\\\",d.set_directory=\\\"$REPLY\\\"\"" >> "$rt_home/.rtorrent.rc"
			done <  <(find "$storage_dir" -maxdepth ${storage_subdirs[$storage_dir]} -type d -print0)
		done
		chown -R --reference="$rt_home/.rtorrent.rc"  "$torrents_dir"
	}
done
